#!/usr/local/cpanel/3rdparty/bin/perl
# SCRIPT: acctinfo                                                                    #
# PURPOSE: Get all information for a username or domain entered at command line       #
# AUTHOR: Peter Elsner <peter.elsner@cpanel.net>                                      #
#######################################################################################
use strict;
my $VERSION="1.10";

use File::stat;
use Getopt::Long;
use Term::ANSIColor qw(:constants);

$Term::ANSIColor::AUTORESET = 1;

my $all = undef;
my $listdbs = undef;
my $listssls = undef;
my $listsubs = undef;
my $listaddons = undef;
my $listparked = undef;
my $listreseller = undef;
my $clearscreen = undef;
my $helpME = undef;

GetOptions(
   'listdbs' => \$listdbs,
   'listssls' => \$listssls,
   'listsubs' => \$listsubs,
   'listaddons' => \$listaddons,
   'listparked' => \$listparked,
   'listreseller' => \$listreseller,
	'all' => \$all,
   'help' => \$helpME,
   'q' => \$clearscreen,
);

if ($clearscreen) { 
	system("clear");
}
print BOLD BLUE "acctinfo - Version: " . YELLOW $VERSION . "\n";
if ($helpME) { 
	&Usage;
}

# Determine the correct HOME DIRECTORY by grabbing the HOMEDIR value
# from /etc/wwwacct.conf (one of cPanel's conf files)
my $IS_USERNAME=1;
my $HOMEDIR=qx[ cat /etc/wwwacct.conf | grep 'HOMEDIR' ];
my ($NAME,$VALUE)=(split(/\s+/,$HOMEDIR));
$HOMEDIR=$VALUE;
chomp($HOMEDIR);
my $SERVER_IP=qx[ cat /etc/wwwacct.conf | grep 'ADDR' ];
($NAME,$VALUE)=(split(/\s+/,$SERVER_IP));
$SERVER_IP=$VALUE;
chomp($SERVER_IP);

my $DOMAIN=@ARGV[0];
chomp($DOMAIN);
if ($DOMAIN eq "") {
	&Usage;
}
$DOMAIN=lc($DOMAIN);
if (index($DOMAIN, '.') != -1) { 
   $IS_USERNAME=0;
}

my $HOSTNAME=`hostname`;
chomp($HOSTNAME);
# First check trueuserdomains (for the main domain)
my @RESULT=qx[ grep $DOMAIN /etc/trueuserdomains ];
my $CNT=@RESULT;
if ($CNT==0) {    ## If not found there, then check userdomains (it could be addon/parked/sub domain)
	@RESULT=qx[ grep $DOMAIN /etc/userdomains ];
	$CNT=@RESULT;
	if ($CNT==0) {     ## If not found there either, then it's not on this server
		print RED "ERROR: " . GREEN $DOMAIN . " not found on " . MAGENTA $HOSTNAME . "\n";
		exit;
	}
}

my ($username)=(split(/\: /,@RESULT[0]))[1];
chomp($username);
# Now get the main domain from /etc/trueuserdomains using the $username
my @MAINDOMAIN=qx[ grep $username /etc/trueuserdomains ];
my ($MAINDOMAIN)=(split(/\: /,@MAINDOMAIN[0]))[0];
chomp($MAINDOMAIN);


# Now read file /etc/userdatadomains into array
open(USERDATAFILE,"/etc/userdatadomains");
my @USERDATADOMAINS=<USERDATAFILE>;
close(USERDATAFILE);

# Now get all parked, addon and sub domains (if any)
my $IS_PARKED="";
my $IS_ADDON="";
my $IS_SUB="";
my @SUBDOMAINS="";
my $ACCT="";
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==sub==/) { 
			my ($sub_domain)=(split(/\s+/,$ACCT))[0];
			chop($sub_domain);
			push(@SUBDOMAINS, $sub_domain);
			if ($sub_domain eq $DOMAIN) { 
				$IS_SUB = "$DOMAIN is a sub domain of $MAINDOMAIN\n";
			}
		}
	}
}
# Now get all addon domains (if any)
my @ADDONDOMAINS="";
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==addon==/) { 
			my ($addon_domain)=(split(/\s+/,$ACCT))[0];
			chop($addon_domain);
			push(@ADDONDOMAINS, $addon_domain);
			if ($addon_domain eq $DOMAIN) { 
				$IS_ADDON = "$DOMAIN is an addon domain of $MAINDOMAIN\n";
			}
		}
	}
}
# Now get all parked domains (if any)
my @PARKEDDOMAINS="";
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==parked==/) { 
			my ($parked_domain)=(split(/\s+/,$ACCT))[0];
			chop($parked_domain);
			push(@PARKEDDOMAINS, $parked_domain);
			if ($parked_domain eq $DOMAIN) { 
				$IS_PARKED = "$DOMAIN is a parked domain of $MAINDOMAIN\n";
			}
		}
	}
}
# Now get all data from /var/cpanel/users/$username
open(USERDATA,"/var/cpanel/users/$username");
my @USERDATA=<USERDATA>;
close(USERDATA);
# Get package
my $USERLINE="";
my $PACKAGE="";
my $IPADDR="";
my $STARTDATE="";
my $STARTDATE2="";
foreach $USERLINE(@USERDATA) { 
	if ($USERLINE =~ m/PLAN/) { 
		($PACKAGE)=(split(/=/,$USERLINE))[1];
		last;
	}
}
chomp($PACKAGE);
# Get IP address
foreach $USERLINE(@USERDATA) { 
	if ($USERLINE =~ m/IP/) { 
		($IPADDR)=(split(/=/,$USERLINE))[1];
		last;
	}
}
chomp($IPADDR);
# Resolve the ip address of $MAINDOMAIN to see if it is pointing somewhere else
my $ResolvedIP=qx[ dig \@8.8.8.8 $MAINDOMAIN A +short ];
my $IPTYPE="shared";
chomp($ResolvedIP);

# Get start date (when account was created)
foreach $USERLINE(@USERDATA) { 
	if ($USERLINE =~ m/STARTDATE/) { 
		($STARTDATE2)=(split(/=/,$USERLINE))[1];
		my $STARTDATE=scalar localtime($STARTDATE2);
		last;
	}
}
# See if this user is it's own owner (if not it is owned by a reseller)
my $RO_TEXT="";
my $REAL_OWNER="";
foreach $USERLINE(@USERDATA) { 
	if ($USERLINE =~ m/^OWNER/) { 
		($REAL_OWNER)=(split(/=/,$USERLINE))[1];
		chomp($REAL_OWNER);
		if ($REAL_OWNER ne $username and $REAL_OWNER ne "root") { 
			my $RO_TEXT=" (Which is under the reseller: $REAL_OWNER)";
		}
		last;
	}
}
# Check if main domain (username) is a reseller.
my $Is_Reseller=0;
my $acct="";
my @OWNEDBYRESELLER=undef;
if (-e("/var/cpanel/root.accts")) { 
	open(accts,"/var/cpanel/root.accts");
	my @AllAccts=<accts>;
	close(accts);
	shift @AllAccts;
	foreach $acct(@AllAccts) { 
		chomp($acct);
		my ($resellersdomain,$OWNER)=(split(/,/,$acct))[0,10];
		if ($OWNER eq $username or $OWNER eq $REAL_OWNER and ($REAL_OWNER ne "root")) { 
			my $Is_Reseller=1;
			push(@OWNEDBYRESELLER,$resellersdomain);
		}
	}
}
# Get IP address from .lastlogin file (if it exists)
my $LastLoginIP="";
my $AccessDate="";
if (-e("$HOMEDIR/$username/.lastlogin")) { 
	$LastLoginIP=qx[ cat $HOMEDIR/$username/.lastlogin ];
	my $nst=stat("$HOMEDIR/$username/.lastlogin");
	my $mtime=$nst->mtime;
	$AccessDate=scalar localtime($mtime);
	chomp($LastLoginIP);
}

my $TOTAL_DOMAINS=qx[ cat /etc/trueuserdomains | wc -l ];
chomp($TOTAL_DOMAINS);
print WHITE "There are " . YELLOW $TOTAL_DOMAINS . WHITE " total domains on this server.\n";
if ($IS_USERNAME) { 
	print "\n";
}
else { 
	print BRIGHT_GREEN ON_BLACK "\nThe user name for " . BLUE $DOMAIN . BRIGHT_GREEN ON_BLACK " is: " . YELLOW $username . "\n";
}
print BRIGHT_GREEN ON_BLACK "The main domain is " . BLUE $MAINDOMAIN . BRIGHT_GREEN ON_BLACK $RO_TEXT . "\n";
print GREEN "$IS_PARKED\n" unless($IS_PARKED eq "");
print GREEN "$IS_ADDON\n" unless($IS_ADDON eq "");
print GREEN "$IS_SUB\n" unless($IS_SUB eq "");
print BLUE $MAINDOMAIN . WHITE " has the " . CYAN $PACKAGE . WHITE " hosting package\n";
if ($ResolvedIP eq $IPADDR) { 
	print BLUE $MAINDOMAIN . WHITE " resolves to SAME (" . CYAN $ResolvedIP . WHITE ")\n";
	if($IPADDR ne $SERVER_IP) { 
		$IPTYPE="dedicated";
	}
}
if ($ResolvedIP ne $IPADDR) { 
	print BLUE $MAINDOMAIN . WHITE " resolves to IP: " . CYAN $ResolvedIP . "\n" unless($ResolvedIP eq "");
	print YELLOW "Seeing defaultwebpage? - This may be why!\n" unless($ResolvedIP eq "");
}
if ($ResolvedIP eq "") { 
	print BLUE  $MAINDOMAIN . WHITE " resolves to " . RED "Non Existant (NXDOMAIN)\n";
}
print BLUE $MAINDOMAIN . WHITE " has a " . CYAN $IPTYPE . WHITE " IP address of " . CYAN $IPADDR . "\n";

# Last Login IP
if($LastLoginIP) { 
	print BLUE $MAINDOMAIN . WHITE " last logged in to cPanel from IP: " . CYAN $LastLoginIP . WHITE " On: " . CYAN $AccessDate . "\n";
}

my $STARTDATE=scalar localtime($STARTDATE2);
chomp($STARTDATE);
print BLUE $MAINDOMAIN . WHITE " has been a customer since " . CYAN $STARTDATE . "\n";

# Check to see if the $username is in /var/cpanel/suspended directory 
my $SUSP=0;
my $REASON="";
if (-e("/var/cpanel/suspended/$username")) { 
	$REASON=`cat /var/cpanel/suspended/$username`;
	chomp($REASON);
	$SUSP=1;
}
if ($SUSP) {
   print BLUE $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ") " . RED "is suspended";
   print WHITE " - Reason: " . CYAN $REASON . "\n" unless($REASON eq "");
}
else {
   print CYAN "$MAINDOMAIN " . WHITE " (" . GREEN $username . WHITE ") is not currently suspended\n";
}
print "\n";
exit unless($all or $listsubs or $listaddons or $listparked or $listdbs or $listssls or $listreseller);

# END OF BASIC INFORMATION (no switches were added) 
# ADDITIONAL INFORMATION STARTS HERE! (if all or any other switches were added)

# DOMAIN INFO (PARKED, ADDON, SUB)
shift @SUBDOMAINS;
shift @ADDONDOMAINS;
shift @PARKEDDOMAINS;
my $subcnt=@SUBDOMAINS;
my $addoncnt=@ADDONDOMAINS;
my $parkcnt=@PARKEDDOMAINS;
my $SUB="";
my $PARK="";
my $ADDON="";
if ($subcnt+$addoncnt+$parkcnt>1 or ($all or $listsubs or $listaddons or $listparked)) { 
	print WHITE "The following are associated with " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	&smborder;
}
if ($all or $listsubs) { 
	print YELLOW "Sub Domains: ";
	if ($subcnt > 0 and ($all or $listsubs)) { 
		foreach $SUB(@SUBDOMAINS) { 
			chomp($SUB);
			print YELLOW "\t \\_ $SUB\n";
		}
	}
	else { 
		print MAGENTA "No Sub Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

if ($all or $listaddons) { 
	print YELLOW "Addon Domains: ";
	if ($addoncnt > 0 and ($all or $listaddons)) { 
		foreach $ADDON(@ADDONDOMAINS) { 
			chomp($ADDON);
			print YELLOW "\t \\_ $ADDON\n";
		}
	}
else { 
		print MAGENTA "No Addon Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

if ($all or $listparked) { 
	print YELLOW "Parked Domains: ";
	if ($parkcnt > 0 and ($all or $listparked)) { 
		foreach $PARK(@PARKEDDOMAINS) { 
			chomp($PARK);
			print YELLOW "\t \\_ $PARK\n";
		}
	}
	else { 
		print MAGENTA "No Parked Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

# RESELLER INFO
if ($listreseller or $all) { 
	&border;
	my $ResellersDomain="";
	if ($Is_Reseller) { 
		if ($RO_TEXT) { 
			print WHITE "The " . GREEN $REAL_OWNER . WHITE " reseller also has the following other domains associated with it\n";
		}
		else { 
			print CYAN $MAINDOMAIN . WHITE " is a reseller and has the following accounts under it\n";
		}
		foreach $ResellersDomain(@OWNEDBYRESELLER) { 
			chomp($ResellersDomain);
			print BOLD BLUE ON_WHITE "\t \\_ $ResellersDomain\n";
		}
	}
	else { 
		print WHITE "No Reseller information found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
		&border;
	}
}

# MySQL INFO
if ($listdbs or $all) { 
	my @USERDBS=undef;
	my @DBSIZE=undef;
	my $USERDB="";
	my $SIZEOFDB="";
	my $DBNAME="";
	my $DBSIZE="";
	&border;
	@USERDBS=qx[ echo "show databases like '$username%'" | mysql ];
	splice(@USERDBS,0,1);
	my $DBCNT=@USERDBS;
	if ($DBCNT == 0) {
		print WHITE "No MySQL databases found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	else { 
		print WHITE "The following MySQL databases can be found under: " . GREEN $username . "\n";
		foreach $USERDB(@USERDBS) {
			chomp($USERDB);
			@DBSIZE = qx[ echo "select table_schema, sum(data_length + index_length) / 1024 / 1024 FROM information_schema.TABLES where table_schema = '$USERDB' GROUP By table_schema;" | mysql ];
			splice(@DBSIZE,0,1);
			chomp(@DBSIZE);
			my $num=@DBSIZE;
			if ($num == 0) {
				print YELLOW "\t \\_" . $USERDB . WHITE "has no tables.\n";
				next;
			}
			foreach $SIZEOFDB(@DBSIZE) {
				chomp($SIZEOFDB);
				($DBNAME,$DBSIZE)=(split(/\s+/,$SIZEOFDB));
				chomp($DBNAME);
				chomp($DBSIZE);
				$DBSIZE=sprintf("%.2f", $DBSIZE);
				print YELLOW "\t \\_ " . $DBNAME . WHITE . " (" . BRIGHT_GREEN ON_WHITE $DBSIZE . WHITE "MB)\n";
			}
		}
	}
	&smborder;
   # PostGreSQL INFO
   my $psql_running = 0; if (qx[ ps ax | grep postgres | grep -v grep ]) { $psql_running = 1; }
   if (-e("/usr/bin/psql") and $psql_running) {    ## PostGreSQL is installed and running
   	my @PSQLDBS=undef;
	   my $PgDb="";
	   @PSQLDBS=qx[ /usr/bin/psql -U postgres -c "SELECT datname FROM pg_catalog.pg_database WHERE datistemplate='f' AND datname !='postgres'" | grep -v '\-' | grep -v 'datname' | grep -v ' row' ];
	   pop(@PSQLDBS);
	   my $PgDbCount=@PSQLDBS;
	   if ($PgDbCount == 0) { 
		   print WHITE "No PostGreSQL databases found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	   }
	   else { 
		   print WHITE "The following PostGreSQL databases can be found under: " . GREEN $username . "\n";
		   my $pg_table="";
		   my @PG_TABLES=undef;
		   foreach $PgDb(@PSQLDBS) { 
			   chomp($PgDb);
			   $PgDb=substr($PgDb,1);
			   $pg_table=qx[ psql -U postgres $PgDb -c "SELECT relname FROM pg_catalog.pg_class WHERE relkind = 'r' AND pg_get_userbyid(relowner) = '$username'" | grep -v '\-' | grep -v 'relname' | grep -v ' row' ];
			   chomp($pg_table);
			   chomp($pg_table);
			   $pg_table =~ s/^\s+//;
			   $pg_table =~ s/\s+/, /g;
			   if ($pg_table eq "") { 
				   print YELLOW "\t \\_" .  $PgDb . WHITE " has no tables\n";
			   }
			   else { 
				   print YELLOW "\t \\_" .  $PgDb . "\n";
               my ($pg_table_size) = (split(/\|/,qx[ psql -U postgres -d $PgDb -c "\\dt+" | grep '$pg_table' ]))[4];
				   print YELLOW "\t\t \\_" . $pg_table . WHITE " (" . BRIGHT_GREEN ON_WHITE $pg_table_size . WHITE ")\n";
			   }
		   }
	   }
   }
   else { 
      print RED "PostGreSQL server is not installed (or running) on " . MAGENTA $HOSTNAME . "\n";
   }
	&border;
}
# SSL INFO
if ($listssls or $all) { 
	my $sslline="";
	my $ssldomain="";
	my @SSLDATA=undef;
	my @SSLFOLDER=undef;
	my $SSLFILE="";
	my $SSLDOMAIN="";
	opendir(SSL,"/var/cpanel/userdata/$username/");
	@SSLFOLDER=readdir(SSL);
	closedir(SSL);
	foreach $SSLFILE(@SSLFOLDER) {
   	chomp($SSLFILE);
   	if ($SSLFILE =~ m/_SSL/) { 
      	($SSLDOMAIN)=(split(/_/,$SSLFILE))[0];
      	push(@SSLDATA,"$SSLDOMAIN"); 
   	}    
	}
	splice(@SSLDATA,0,1);   ## Remove the first element since it will be blank
	my $sslcnt=@SSLDATA;
	if ($sslcnt > 0) {
		print WHITE "SSL Certificates installed under " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
		foreach $sslline(@SSLDATA) { 
			chomp($sslline);
			print YELLOW "\t \\_ " . $sslline . "\n";
		}
	}
	else { 
		&border;
		print WHITE "No SSL Certificates found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&border;
}

exit;

sub Usage { 
   print WHITE "\nUsage: " . CYAN $0 . WHITE " [options] domainname.tld or cPUsername [options]\n\n";
   print YELLOW "Examples: \n" . CYAN $0 . WHITE " --listdbs somedomain.net\n";
   print GREEN "\t Lists any MySQL databases (and their sizes) as well as any PostGreSQL\n\t databases for somedomain.net\n\n";
   print CYAN $0 . WHITE " --listsubs cptestdo\n";
   print GREEN "\t Lists all sub domains under the cptestdo user name.\n\n";
   print CYAN $0 . WHITE " --listaddons cptestdomain.net\n";
   print GREEN "\t Lists all addon domains under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --listparked cptestdomain.net\n";
   print GREEN "\t Lists all parked domains under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --listreseller cptestdo\n";
   print GREEN "\t Lists reseller information and domains under the cptestdo user name.\n\n";
   print CYAN $0 . WHITE " --listssls cptestdomain.net\n";
   print GREEN "\t Lists any SSL's under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --all cptestdomain.net\n";
   print GREEN "\t Lists everything for the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --help\n";
   print GREEN "\t Shows this usage information. (NOTE: [options] can go before or after domain/username).\n\n";
	exit;
}

sub border { 
	print BRIGHT_BLUE ON_BLACK "==============================================================================================\n";
}

sub smborder { 
	print MAGENTA "----------------------------------------------------------------------------------------------\n";
}
