#!/usr/local/cpanel/3rdparty/bin/perl
# SCRIPT: acctinfo                                                                    #
# PURPOSE: Get all information for a username or domain entered at command line       #
# AUTHOR: Peter Elsner <peter.elsner@cpanel.net>                                      #
#######################################################################################

BEGIN {
    unshift @INC, '/usr/local/cpanel';
    unshift @INC, '/usr/local/cpanel/scripts';
    unshift @INC, '/usr/local/cpanel/bin';
}

use strict;
my $VERSION="2.0";

use File::stat;
use Getopt::Long;
use Term::ANSIColor qw(:constants);
use Cpanel::Sys::Hostname       			();
use Cpanel::Config::LoadCpUserFile 		();
use Cpanel::Config::Users          		();
use Cpanel::Config::LoadWwwAcctConf 	();
use Cpanel::ResellerFunctions				();
use Cpanel::Usage                   	();

$Term::ANSIColor::AUTORESET = 1;

my $all = undef;
my $listdbs = undef;
my $listssls = undef;
my $listsubs = undef;
my $listaddons = undef;
my $listparked = undef;
my $listreseller = undef;
my $clearscreen = undef;
my $helpME = undef;
my $SearchFor = undef;

GetOptions(
	'listdbs' => \$listdbs,
	'listssls' => \$listssls,
	'listsubs' => \$listsubs,
	'listaddons' => \$listaddons,
	'listparked' => \$listparked,
	'listreseller' => \$listreseller,
	'all' => \$all,
	'help' => \$helpME,
	'q' => \$clearscreen,
);

if ($clearscreen) { 
	system("clear");
}
print BOLD BLUE "acctinfo - Version: " . YELLOW $VERSION . "\n";
if ($helpME) { 
	&Usage;
}

my $conf = Cpanel::Config::LoadWwwAcctConf::loadwwwacctconf();
my $HOMEDIR = $conf->{'HOMEDIR'};
my $SERVER_IP = $conf->{'ADDR'};

my $IS_USERNAME=1;

my $QUERY=@ARGV[0];
chomp($QUERY);
if ($QUERY eq "") {
	&Usage;
}
$QUERY=lc($QUERY);
if (index($QUERY, '.') != -1) { 
   $IS_USERNAME=0;
}

my $HOSTNAME = Cpanel::Sys::Hostname::gethostname();
my $MAINDOMAIN="";
my $username="";

if ($IS_USERNAME) { 
	$MAINDOMAIN=&FindMainDomain($QUERY);
#	$username=&FindUser($MAINDOMAIN);
	$username=$QUERY;
}
else { 
	$username=&FindUser($QUERY);
	$MAINDOMAIN=&FindMainDomain($username);
}
chomp($MAINDOMAIN);
chomp($username);
if (!($MAINDOMAIN)) { 
	$username=&FindUser($QUERY);
	$MAINDOMAIN=&FindMainDomain($username);
}
# If both variables are still empty, neither the username nor the domain name were found!
if ($MAINDOMAIN eq "" and $username eq "") { 
	print "Error - $QUERY not found on $HOSTNAME\n";
	# Add message here to try using the --cruft switch (to be added later).
	exit;
}

# Load /var/cpanel/users/$username into config hash variable
my $user_conf = Cpanel::Config::LoadCpUserFile::load($username);
my $DOMAIN = $QUERY;
my $IS_PARKED="";
my $IS_ADDON="";
my $IS_SUB="";
my @SUBDOMAINS="";
my @ADDONDOMAINS="";
my @PARKEDDOMAINS="";
my $ACCT="";
open(USERDATAFILE,"/etc/userdatadomains");
my @USERDATADOMAINS=<USERDATAFILE>;
close(USERDATAFILE);
# Now get all sub domains (if any)
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==sub==/) { 
			my ($sub_domain)=(split(/\s+/,$ACCT))[0];
			chop($sub_domain);
			push(@SUBDOMAINS, $sub_domain);
			if ($sub_domain eq $DOMAIN) { 
				$IS_SUB = "$DOMAIN is a sub domain of $MAINDOMAIN\n";
			}
		}
	}
}
# Now get all addon domains (if any)
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==addon==/) { 
			my ($addon_domain)=(split(/\s+/,$ACCT))[0];
			chop($addon_domain);
			push(@ADDONDOMAINS, $addon_domain);
			if ($addon_domain eq $DOMAIN) { 
				$IS_ADDON = "$DOMAIN is an addon domain of $MAINDOMAIN\n";
			}
		}
	}
}
# Now get all parked domains (if any)
foreach $ACCT(@USERDATADOMAINS) { 
	chomp($ACCT);
	if($ACCT =~ m/ $username/) { 
		if($ACCT =~ m/==parked==/) { 
			my ($parked_domain)=(split(/\s+/,$ACCT))[0];
			chop($parked_domain);
			push(@PARKEDDOMAINS, $parked_domain);
			if ($parked_domain eq $DOMAIN) { 
				$IS_PARKED = "$DOMAIN is a parked domain of $MAINDOMAIN\n";
			}
		}
	}
}

shift @SUBDOMAINS;
shift @ADDONDOMAINS;
shift @PARKEDDOMAINS;
my $subcnt=@SUBDOMAINS;
my $addoncnt=@ADDONDOMAINS;

# We already have the $user_conf hash variable.
my $PACKAGE=$user_conf->{'PLAN'};
my $IPADDR=$user_conf->{'IP'};
my $STARTDATE=scalar localtime($user_conf->{'STARTDATE'});
# Resolve the ip address of $MAINDOMAIN to see if it is pointing somewhere else
my $ResolvedIP=qx[ dig \@8.8.8.8 $MAINDOMAIN A +short ];
chomp($ResolvedIP);
my $IPTYPE="";
if ($IPADDR eq $SERVER_IP) {
	$IPTYPE="shared";
}
else {
	$IPTYPE="dedicated";
}
my $REAL_OWNER=$user_conf->{'OWNER'};
my $RO_TEXT="";
if ($REAL_OWNER ne $username and $REAL_OWNER ne "root") { 
	$RO_TEXT=" (Which is under the reseller: $REAL_OWNER)";
}
# Check if main domain (username) is a reseller.
my @ACCTSOWNEDBYRESELLER=undef;
my @LISTOFACCTS=undef;
my $Is_Reseller=0;
my $ResellerAcctsCnt=0;
my $ResellerDomain="";
my $vcu_account="";
my $ResellersAcct="";
my $RESELLER="";
my $FOUND="";
my @ALL_RESELLERS=Cpanel::ResellerFunctions::getresellerslist();
unshift @ALL_RESELLERS, 'root';
foreach $RESELLER(@ALL_RESELLERS) { 
	chomp($RESELLER);
	if ($RESELLER eq $username) { 
		$Is_Reseller=1;
		# Read all accounts in /var/cpanelusers into array
		opendir(ACCTS,"/var/cpanel/users");
		my @LISTOFACCTS=readdir(ACCTS);
		closedir(ACCTS);
		foreach $vcu_account(@LISTOFACCTS) { 
			chomp($vcu_account);
			$FOUND="";
			$FOUND=qx[ grep 'OWNER=$username' /var/cpanel/users/$vcu_account ];
			if ($FOUND) { 
				$ResellersAcct=qx[ grep 'DNS=' /var/cpanel/users/$vcu_account ];
				$ResellerDomain=substr($ResellersAcct,4);
				chomp($ResellerDomain);
				push(@ACCTSOWNEDBYRESELLER,"$ResellerDomain ($vcu_account)");
			}
		}
		$ResellerAcctsCnt=@ACCTSOWNEDBYRESELLER;
		last;
	}
}

# Get IP address from .lastlogin file (if it exists)
my $LastLoginIP="";
my $AccessDate="";
if (-e("$HOMEDIR/$username/.lastlogin")) { 
	$LastLoginIP=qx[ cat $HOMEDIR/$username/.lastlogin ];
	my $nst=stat("$HOMEDIR/$username/.lastlogin");
	my $mtime=$nst->mtime;
	$AccessDate=scalar localtime($mtime);
	chomp($LastLoginIP);
}

my $TOTAL_DOMAINS=qx[ cat /etc/trueuserdomains | wc -l ];
chomp($TOTAL_DOMAINS);
print WHITE "There are " . YELLOW $TOTAL_DOMAINS . WHITE " total domains on (" . BRIGHT_GREEN ON_BLACK $HOSTNAME . WHITE ").\n";
if ($IS_USERNAME) { 
	print "\n";
}
else { 
	print BRIGHT_GREEN ON_BLACK "\nThe user name for " . BLUE $DOMAIN . BRIGHT_GREEN ON_BLACK " is: " . YELLOW $username . "\n";
}
print BRIGHT_GREEN ON_BLACK "The main domain is " . BLUE $MAINDOMAIN . BRIGHT_GREEN ON_BLACK $RO_TEXT . "\n";
if ($Is_Reseller) { 
	print BRIGHT_GREEN ON_BLACK "This account is also a reseller!\n";
}
print GREEN "$IS_PARKED\n" unless($IS_PARKED eq "");
print GREEN "$IS_ADDON\n" unless($IS_ADDON eq "");
print GREEN "$IS_SUB\n" unless($IS_SUB eq "");
#print BLUE $MAINDOMAIN . WHITE " has the " . CYAN $PACKAGE . WHITE " hosting package\n";
print WHITE "Hosting Package: " . CYAN $PACKAGE . "\n";
print WHITE "IP address: " . CYAN $IPADDR . WHITE " (" . CYAN $IPTYPE . WHITE ")\n";
if ($ResolvedIP eq $IPADDR) { 
	print WHITE "Resolves to SAME (" . CYAN $ResolvedIP . ")\n";
}
if ($ResolvedIP ne $IPADDR) { 
	# Check for 1:1 NAT config - IPADDR might be private and defined in /var/cpanel/cpnat
	print WHITE "Resolves to IP: " . CYAN $ResolvedIP . "\n" unless($ResolvedIP eq "");
	print YELLOW "Seeing defaultwebpage.cgi? - This may be why!\n" unless($ResolvedIP eq "");
}
if ($ResolvedIP eq "") { 
	print WHITE "Resolves to " . RED "Non Existant (NXDOMAIN)\n";
}
#print BLUE $MAINDOMAIN . WHITE " has a " . CYAN $IPTYPE . WHITE " IP address of " . CYAN $IPADDR . "\n";

# Last Login IP
if($LastLoginIP) { 
	print WHITE "Last logged in to cPanel from IP: " . CYAN $LastLoginIP . WHITE " On: " . CYAN $AccessDate . "\n";
}

print WHITE "Has been a customer since " . CYAN $STARTDATE . "\n";

# Check to see if the $username is in /var/cpanel/suspended directory 
my $SUSP=0;
my $REASON="";
if (-e("/var/cpanel/suspended/$username")) { 
	$REASON=`cat /var/cpanel/suspended/$username`;
	chomp($REASON);
	$SUSP=1;
}
print WHITE "Suspended: ";
if ($SUSP) {
   print RED "YES!"; 
	print WHITE " - Reason: " . CYAN $REASON unless($REASON eq "");
}
else {
   print GREEN "No";
}
print "\n";
my $parkcnt=@PARKEDDOMAINS;
print WHITE "Count of other domains: [" . YELLOW "SUB: " . GREEN $subcnt . WHITE "] - [" . YELLOW "PARKED: " . GREEN $parkcnt . WHITE "] - [" . YELLOW "ADDONS: " . GREEN $addoncnt . WHITE "]\n";
exit unless($all or $listsubs or $listaddons or $listparked or $listdbs or $listssls or $listreseller);

# END OF BASIC INFORMATION (no switches were added) 
# ADDITIONAL INFORMATION STARTS HERE! (if all or any other switches were added)

# DOMAIN INFO (PARKED, ADDON, SUB)
my $SUB="";
my $PARK="";
my $ADDON="";
if ($subcnt+$addoncnt+$parkcnt>1 or ($all or $listsubs or $listaddons or $listparked)) { 
	print WHITE "The following are associated with " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	&smborder;
}
if ($all or $listsubs) { 
	print YELLOW "Sub Domains: ";
	if ($subcnt > 0 and ($all or $listsubs)) { 
      print "\n";
		foreach $SUB(@SUBDOMAINS) { 
			chomp($SUB);
			print YELLOW "\t \\_ $SUB\n";
		}
	}
	else { 
		print MAGENTA "No Sub Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

if ($all or $listaddons) { 
	print YELLOW "Addon Domains: ";
	if ($addoncnt > 0 and ($all or $listaddons)) { 
      print "\n";
		foreach $ADDON(@ADDONDOMAINS) { 
			chomp($ADDON);
			print YELLOW "\t \\_ $ADDON\n";
		}
	}
else { 
		print MAGENTA "No Addon Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

if ($all or $listparked) { 
	print YELLOW "Parked Domains: ";
	if ($parkcnt > 0 and ($all or $listparked)) { 
      print "\n";
		foreach $PARK(@PARKEDDOMAINS) { 
			chomp($PARK);
			print YELLOW "\t \\_ $PARK\n";
		}
	}
	else { 
		print MAGENTA "No Parked Domains found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&smborder;
}

# RESELLER INFO
if ($listreseller or $all) { 
	&border;
	my $owned_by_reseller="";
	if ($Is_Reseller and $ResellerAcctsCnt > 0) { 
		print CYAN $MAINDOMAIN . WHITE " is a reseller and has the following accounts under it\n";
		# RIGHT HERE
		shift @ACCTSOWNEDBYRESELLER;
		foreach $owned_by_reseller(@ACCTSOWNEDBYRESELLER) { 
			chomp($owned_by_reseller);
			print BOLD YELLOW ON_BLACK "\t \\_ $owned_by_reseller\n";
		}
	}
	else { 
		print WHITE "No Reseller information found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
		&border;
	}
}

# MySQL INFO
if ($listdbs or $all) { 
	my @USERDBS=undef;
	my @DBSIZE=undef;
	my $USERDB="";
	my $SIZEOFDB="";
	my $DBNAME="";
	my $DBSIZE="";
	&border;
	@USERDBS=qx[ echo "show databases like '$username%'" | mysql ];
	splice(@USERDBS,0,1);
	my $DBCNT=@USERDBS;
	if ($DBCNT == 0) {
		print WHITE "No MySQL databases found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	else { 
		print WHITE "The following MySQL databases can be found under: " . GREEN $username . "\n";
		foreach $USERDB(@USERDBS) {
			chomp($USERDB);
			@DBSIZE = qx[ echo "select table_schema, sum(data_length + index_length) / 1024 / 1024 FROM information_schema.TABLES where table_schema = '$USERDB' GROUP By table_schema;" | mysql ];
			splice(@DBSIZE,0,1);
			chomp(@DBSIZE);
			my $num=@DBSIZE;
			if ($num == 0) {
				print YELLOW "\t \\_" . $USERDB . WHITE "has no tables.\n";
				next;
			}
			foreach $SIZEOFDB(@DBSIZE) {
				chomp($SIZEOFDB);
				($DBNAME,$DBSIZE)=(split(/\s+/,$SIZEOFDB));
				chomp($DBNAME);
				chomp($DBSIZE);
				$DBSIZE=sprintf("%.2f", $DBSIZE);
				print YELLOW "\t \\_ " . $DBNAME . WHITE . " (" . BRIGHT_GREEN ON_WHITE $DBSIZE . WHITE "MB)\n";
			}
		}
	}
	&smborder;
   # PostGreSQL INFO
   my $psql_running = 0; if (qx[ ps ax | grep postgres | grep -v grep ]) { $psql_running = 1; }
   if (-e("/usr/bin/psql") and $psql_running) {    ## PostGreSQL is installed and running
   	my @PSQLDBS=undef;
	   my $PgDb="";
	   @PSQLDBS=qx[ /usr/bin/psql -U postgres -c "SELECT datname FROM pg_catalog.pg_database WHERE datistemplate='f' AND datname !='postgres'" | grep -v '\-' | grep -v 'datname' | grep -v ' row' ];
	   pop(@PSQLDBS);
	   my $PgDbCount=@PSQLDBS;
	   if ($PgDbCount == 0) { 
		   print WHITE "No PostGreSQL databases found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	   }
	   else { 
		   print WHITE "The following PostGreSQL databases can be found under: " . GREEN $username . "\n";
		   my $pg_table="";
		   my @PG_TABLES=undef;
		   foreach $PgDb(@PSQLDBS) { 
			   chomp($PgDb);
			   $PgDb=substr($PgDb,1);
			   $pg_table=qx[ psql -U postgres $PgDb -c "SELECT relname FROM pg_catalog.pg_class WHERE relkind = 'r' AND pg_get_userbyid(relowner) = '$username'" | grep -v '\-' | grep -v 'relname' | grep -v ' row' ];
			   chomp($pg_table);
			   chomp($pg_table);
			   $pg_table =~ s/^\s+//;
			   $pg_table =~ s/\s+/, /g;
			   if ($pg_table eq "") { 
				   print YELLOW "\t \\_" .  $PgDb . WHITE " has no tables\n";
			   }
			   else { 
				   print YELLOW "\t \\_" .  $PgDb . "\n";
			   }
		   }
	   }
   }
   else { 
      print RED "PostGreSQL server is not installed (or running) on " . MAGENTA $HOSTNAME . "\n";
   }
	&border;
}
# SSL INFO
if ($listssls or $all) { 
	my $sslline="";
	my $ssldomain="";
	my @SSLDATA=undef;
	my @SSLFOLDER=undef;
	my $SSLFILE="";
	my $SSLDOMAIN="";
	opendir(SSL,"/var/cpanel/userdata/$username/");
	@SSLFOLDER=readdir(SSL);
	closedir(SSL);
	foreach $SSLFILE(@SSLFOLDER) {
   	chomp($SSLFILE);
   	if ($SSLFILE =~ m/_SSL/) { 
      	($SSLDOMAIN)=(split(/_/,$SSLFILE))[0];
      	push(@SSLDATA,"$SSLDOMAIN"); 
   	}    
	}
	splice(@SSLDATA,0,1);   ## Remove the first element since it will be blank
	my $sslcnt=@SSLDATA;
	if ($sslcnt > 0) {
		print WHITE "SSL Certificates installed under " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
		foreach $sslline(@SSLDATA) { 
			chomp($sslline);
			print YELLOW "\t \\_ " . $sslline . "\n";
		}
	}
	else { 
		&border;
		print WHITE "No SSL Certificates found for " . CYAN $MAINDOMAIN . WHITE " (" . GREEN $username . WHITE ")\n";
	}
	&border;
}

exit;

sub Usage { 
   print WHITE "\nUsage: " . CYAN $0 . WHITE " [options] domainname.tld or cPUsername [options]\n\n";
   print YELLOW "Examples: \n" . CYAN $0 . WHITE " --listdbs somedomain.net\n";
   print GREEN "\t Lists any MySQL databases (and their sizes) as well as any PostGreSQL\n\t databases for somedomain.net\n\n";
   print CYAN $0 . WHITE " --listsubs cptestdo\n";
   print GREEN "\t Lists all sub domains under the cptestdo user name.\n\n";
   print CYAN $0 . WHITE " --listaddons cptestdomain.net\n";
   print GREEN "\t Lists all addon domains under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --listparked cptestdomain.net\n";
   print GREEN "\t Lists all parked domains under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --listreseller cptestdo\n";
   print GREEN "\t Lists reseller information and domains under the cptestdo user name.\n\n";
   print CYAN $0 . WHITE " --listssls cptestdomain.net\n";
   print GREEN "\t Lists any SSL's under the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --all cptestdomain.net\n";
   print GREEN "\t Lists everything for the cptestdomain.net domain name.\n\n";
   print CYAN $0 . WHITE " --help\n";
   print GREEN "\t Shows this usage information. (NOTE: [options] can go before or after domain/username).\n\n";
	exit;
}

sub border { 
	print BRIGHT_BLUE ON_BLACK "==============================================================================================\n";
}

sub smborder { 
	print MAGENTA "----------------------------------------------------------------------------------------------\n";
}

sub FindMainDomain() {
	$SearchFor=$_[0];
	my $MAINUSER="";
	my $TrueUserLine="";
	open(TRUEUSER,"/etc/trueuserdomains");
	my @TRUEUSERS=<TRUEUSER>;
	close(TRUEUSER);
	foreach $TrueUserLine(@TRUEUSERS) {
		chomp($TrueUserLine);
		($MAINDOMAIN,$MAINUSER)=(split(/:\s+/,$TrueUserLine));
		if ($MAINUSER eq $SearchFor) {
			return $MAINDOMAIN;
		}
	}
}

sub FindUser() { 
	my $SearchFor=$_[0];
	my $UserLine="";
	my $TheDOMAIN="";
	my $TheUSER="";
	open(USERDOMAIN,"/etc/userdomains");
	my @USERDOMAINS=<USERDOMAIN>;
	close(USERDOMAIN);
	foreach $UserLine(@USERDOMAINS) {
		chomp($UserLine);
		($TheDOMAIN,$TheUSER)=(split(/:\s+/,$UserLine));
		if ($TheDOMAIN eq $SearchFor) {
			return $TheUSER;
		}
	}
}


